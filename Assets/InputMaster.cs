//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.10.0
//     from Assets/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""PlayerInputs"",
            ""id"": ""541312a2-7183-4d32-8cb5-f0f7970d8854"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""c1b84f64-9ed1-4350-9f6a-867807c7b9f0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Touch"",
                    ""type"": ""Button"",
                    ""id"": ""3a0b43e4-6cf5-4b8f-be4d-b8fd1df249f9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""touchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""d5c98fc8-b172-41c8-80d7-311e44282ad2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""clickPosition"",
                    ""type"": ""Value"",
                    ""id"": ""88777fac-f2c0-4df7-aa61-84500a4c9ce8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40da3fb6-e414-4572-bcc9-99c609b58d02"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";click"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cfce0c45-a537-48b3-8317-4c4c9af289a7"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Screen"",
                    ""action"": ""Touch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df60956a-1220-4d52-adcc-907f0d303162"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""touchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3d80024-0584-4156-b3ed-c13e4de632bd"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";click"",
                    ""action"": ""clickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Pathfinding"",
            ""id"": ""cd43508b-fbf2-4675-9780-e8c2d89f731d"",
            ""actions"": [
                {
                    ""name"": ""RightClick"",
                    ""type"": ""Button"",
                    ""id"": ""62d4b9ec-232b-42ff-bc6b-cf15f5ee27e3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClickPosition"",
                    ""type"": ""Value"",
                    ""id"": ""05d2948b-c323-4c9c-89a9-5f5c54c390dd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e232dad4-8aa6-4957-a752-2bbbdc70cdbf"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc154c11-7778-46a8-9261-cd77a5a1a584"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightClickPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""click"",
            ""bindingGroup"": ""click"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Screen"",
            ""bindingGroup"": ""Screen"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerInputs
        m_PlayerInputs = asset.FindActionMap("PlayerInputs", throwIfNotFound: true);
        m_PlayerInputs_Click = m_PlayerInputs.FindAction("Click", throwIfNotFound: true);
        m_PlayerInputs_Touch = m_PlayerInputs.FindAction("Touch", throwIfNotFound: true);
        m_PlayerInputs_touchPosition = m_PlayerInputs.FindAction("touchPosition", throwIfNotFound: true);
        m_PlayerInputs_clickPosition = m_PlayerInputs.FindAction("clickPosition", throwIfNotFound: true);
        // Pathfinding
        m_Pathfinding = asset.FindActionMap("Pathfinding", throwIfNotFound: true);
        m_Pathfinding_RightClick = m_Pathfinding.FindAction("RightClick", throwIfNotFound: true);
        m_Pathfinding_RightClickPosition = m_Pathfinding.FindAction("RightClickPosition", throwIfNotFound: true);
    }

    ~@InputMaster()
    {
        UnityEngine.Debug.Assert(!m_PlayerInputs.enabled, "This will cause a leak and performance issues, InputMaster.PlayerInputs.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Pathfinding.enabled, "This will cause a leak and performance issues, InputMaster.Pathfinding.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputs
    private readonly InputActionMap m_PlayerInputs;
    private List<IPlayerInputsActions> m_PlayerInputsActionsCallbackInterfaces = new List<IPlayerInputsActions>();
    private readonly InputAction m_PlayerInputs_Click;
    private readonly InputAction m_PlayerInputs_Touch;
    private readonly InputAction m_PlayerInputs_touchPosition;
    private readonly InputAction m_PlayerInputs_clickPosition;
    public struct PlayerInputsActions
    {
        private @InputMaster m_Wrapper;
        public PlayerInputsActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_PlayerInputs_Click;
        public InputAction @Touch => m_Wrapper.m_PlayerInputs_Touch;
        public InputAction @touchPosition => m_Wrapper.m_PlayerInputs_touchPosition;
        public InputAction @clickPosition => m_Wrapper.m_PlayerInputs_clickPosition;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Add(instance);
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @Touch.started += instance.OnTouch;
            @Touch.performed += instance.OnTouch;
            @Touch.canceled += instance.OnTouch;
            @touchPosition.started += instance.OnTouchPosition;
            @touchPosition.performed += instance.OnTouchPosition;
            @touchPosition.canceled += instance.OnTouchPosition;
            @clickPosition.started += instance.OnClickPosition;
            @clickPosition.performed += instance.OnClickPosition;
            @clickPosition.canceled += instance.OnClickPosition;
        }

        private void UnregisterCallbacks(IPlayerInputsActions instance)
        {
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @Touch.started -= instance.OnTouch;
            @Touch.performed -= instance.OnTouch;
            @Touch.canceled -= instance.OnTouch;
            @touchPosition.started -= instance.OnTouchPosition;
            @touchPosition.performed -= instance.OnTouchPosition;
            @touchPosition.canceled -= instance.OnTouchPosition;
            @clickPosition.started -= instance.OnClickPosition;
            @clickPosition.performed -= instance.OnClickPosition;
            @clickPosition.canceled -= instance.OnClickPosition;
        }

        public void RemoveCallbacks(IPlayerInputsActions instance)
        {
            if (m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerInputsActions @PlayerInputs => new PlayerInputsActions(this);

    // Pathfinding
    private readonly InputActionMap m_Pathfinding;
    private List<IPathfindingActions> m_PathfindingActionsCallbackInterfaces = new List<IPathfindingActions>();
    private readonly InputAction m_Pathfinding_RightClick;
    private readonly InputAction m_Pathfinding_RightClickPosition;
    public struct PathfindingActions
    {
        private @InputMaster m_Wrapper;
        public PathfindingActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @RightClick => m_Wrapper.m_Pathfinding_RightClick;
        public InputAction @RightClickPosition => m_Wrapper.m_Pathfinding_RightClickPosition;
        public InputActionMap Get() { return m_Wrapper.m_Pathfinding; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PathfindingActions set) { return set.Get(); }
        public void AddCallbacks(IPathfindingActions instance)
        {
            if (instance == null || m_Wrapper.m_PathfindingActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PathfindingActionsCallbackInterfaces.Add(instance);
            @RightClick.started += instance.OnRightClick;
            @RightClick.performed += instance.OnRightClick;
            @RightClick.canceled += instance.OnRightClick;
            @RightClickPosition.started += instance.OnRightClickPosition;
            @RightClickPosition.performed += instance.OnRightClickPosition;
            @RightClickPosition.canceled += instance.OnRightClickPosition;
        }

        private void UnregisterCallbacks(IPathfindingActions instance)
        {
            @RightClick.started -= instance.OnRightClick;
            @RightClick.performed -= instance.OnRightClick;
            @RightClick.canceled -= instance.OnRightClick;
            @RightClickPosition.started -= instance.OnRightClickPosition;
            @RightClickPosition.performed -= instance.OnRightClickPosition;
            @RightClickPosition.canceled -= instance.OnRightClickPosition;
        }

        public void RemoveCallbacks(IPathfindingActions instance)
        {
            if (m_Wrapper.m_PathfindingActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPathfindingActions instance)
        {
            foreach (var item in m_Wrapper.m_PathfindingActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PathfindingActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PathfindingActions @Pathfinding => new PathfindingActions(this);
    private int m_clickSchemeIndex = -1;
    public InputControlScheme clickScheme
    {
        get
        {
            if (m_clickSchemeIndex == -1) m_clickSchemeIndex = asset.FindControlSchemeIndex("click");
            return asset.controlSchemes[m_clickSchemeIndex];
        }
    }
    private int m_ScreenSchemeIndex = -1;
    public InputControlScheme ScreenScheme
    {
        get
        {
            if (m_ScreenSchemeIndex == -1) m_ScreenSchemeIndex = asset.FindControlSchemeIndex("Screen");
            return asset.controlSchemes[m_ScreenSchemeIndex];
        }
    }
    public interface IPlayerInputsActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnTouch(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnClickPosition(InputAction.CallbackContext context);
    }
    public interface IPathfindingActions
    {
        void OnRightClick(InputAction.CallbackContext context);
        void OnRightClickPosition(InputAction.CallbackContext context);
    }
}
